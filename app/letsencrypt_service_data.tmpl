{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
{{ $scopedContainersString := "" }}

{{ range $hosts, $containers := groupBy $ "Env.LETSENCRYPT_HOST" }}
    {{ if trim $hosts }}
        {{ range $container := $containers }}
            {{ if $CurrentContainer.Env.MUST_BE_CONNECTED_WITH_NETWORK }}
                {{ range $containerNetwork := $container.Networks }}
                    {{ if eq $CurrentContainer.Env.MUST_BE_CONNECTED_WITH_NETWORK $containerNetwork.Name }}
                        {{ $scopedContainersString = (printf "%s %.12s" $scopedContainersString $container.ID) }}
                    {{ end }}
                {{ end }}
            {{ else }}
                {{ $scopedContainersString = (printf "%s %.12s" $scopedContainersString $container.ID) }}
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}
{{ $scopedContainersSlice := split (trim $scopedContainersString) " " }}

LETSENCRYPT_CONTAINERS=({{ range $hosts, $containers := groupBy $ "Env.LETSENCRYPT_HOST" }}
    {{ if trim $hosts }}
        {{ range $container := $containers }}
            {{ $cid := printf "%.12s" $container.ID }}
            {{ if intersect $scopedContainersSlice (split $cid " ") }}
                {{ if ($container.Env.LETSENCRYPT_STANDALONE_CERTS) and eq $container.Env.LETSENCRYPT_STANDALONE_CERTS "true" }}
                    {{ range $host := split $hosts "," }}
                        {{ $host := trim $host }}
                        '{{ printf "%.12s_%s" $container.ID (sha1 $host) }}'
                    {{ end }}
                {{ else }}
                    '{{ $cid }}'
                {{ end }}
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }})

{{ range $hosts, $containers := groupBy $ "Env.LETSENCRYPT_HOST" }}
    {{ $hosts := trimSuffix "," $hosts }}
    {{ range $container := $containers }}
        {{ $cid := printf "%.12s" $container.ID }}
        {{ if intersect $scopedContainersSlice (split $cid " ") }}
            {{ if ($container.Env.LETSENCRYPT_STANDALONE_CERTS) and eq $container.Env.LETSENCRYPT_STANDALONE_CERTS "true" }}
                {{ range $host := split $hosts "," }}
                    {{ $host := trim $host }}
                    {{ $hostHash := sha1 $host }}
                    LETSENCRYPT_{{ $cid }}_{{ $hostHash }}_HOST=('{{ $host }}')
                    LETSENCRYPT_{{ $cid }}_{{ $hostHash }}_EMAIL="{{ $container.Env.LETSENCRYPT_EMAIL }}"
                    LETSENCRYPT_{{ $cid }}_{{ $hostHash }}_KEYSIZE="{{ $container.Env.LETSENCRYPT_KEYSIZE }}"
                    LETSENCRYPT_{{ $cid }}_{{ $hostHash }}_TEST="{{ $container.Env.LETSENCRYPT_TEST }}"
                    LETSENCRYPT_{{ $cid }}_{{ $hostHash }}_ACCOUNT_ALIAS="{{ $container.Env.LETSENCRYPT_ACCOUNT_ALIAS }}"
                    LETSENCRYPT_{{ $cid }}_{{ $hostHash }}_RESTART_CONTAINER="{{ $container.Env.LETSENCRYPT_RESTART_CONTAINER }}"
                    LETSENCRYPT_{{ $cid }}_{{ $hostHash }}_MIN_VALIDITY="{{ $container.Env.LETSENCRYPT_MIN_VALIDITY }}"
                {{ end }}
            {{ else }}
                LETSENCRYPT_{{ $cid }}_HOST=( {{ range $host := split $hosts "," }}{{ $host := trim $host }}'{{ $host }}' {{ end }})
                LETSENCRYPT_{{ $cid }}_EMAIL="{{ $container.Env.LETSENCRYPT_EMAIL }}"
                LETSENCRYPT_{{ $cid }}_KEYSIZE="{{ $container.Env.LETSENCRYPT_KEYSIZE }}"
                LETSENCRYPT_{{ $cid }}_TEST="{{ $container.Env.LETSENCRYPT_TEST }}"
                LETSENCRYPT_{{ $cid }}_ACCOUNT_ALIAS="{{ $container.Env.LETSENCRYPT_ACCOUNT_ALIAS }}"
                LETSENCRYPT_{{ $cid }}_RESTART_CONTAINER="{{ $container.Env.LETSENCRYPT_RESTART_CONTAINER }}"
                LETSENCRYPT_{{ $cid }}_MIN_VALIDITY="{{ $container.Env.LETSENCRYPT_MIN_VALIDITY }}"
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}
